import passport from"passport";import local from"passport-local";import{createHash,isValidPassword}from"../utils/hashPassword.js";import userDao from"../dao/mongoDao/user.dao.js";import google from"passport-google-oauth20";import jwt from"passport-jwt";import envs from"./env.config.js";const localStrategy=local.Strategy,googleStrategy=google.Strategy,JWTStrategy=jwt.Strategy,ExtractJWT=jwt.ExtractJwt,cookieExtracto=req=>{let token=null;return req&&req.cookies&&(token=req.cookies.token),token},inicializePassport=()=>{passport.use("register",new localStrategy({passReqToCallback:!0,usernameField:"email"},async(req,username,password,done)=>{try{const{first_name:first_name,last_name:last_name,email:email,age:age,role:role}=req.body,user=await userDao.getByEmail(username);if(user)return done(null,!1,{message:"El usuario ya existe."});const newUser={first_name:first_name,last_name:last_name,email:email,password:createHash(password),age:age,role:role},createUser=await userDao.create(newUser);return done(null,createUser)}catch(error){return done(error)}})),passport.use("login",new localStrategy({usernameField:"email"},async(username,password,done)=>{try{const user=await userDao.getByEmail(username);return user&&isValidPassword(user,password)?done(null,user):done(null,!1,{message:"Email o password invÃ¡lido."})}catch(error){done(error)}})),passport.use("google",new googleStrategy({clientID:envs.GOOGLE_CLIENT_ID,clientSecret:envs.GOOGLE_CLIENT_SECRET,callbackURL:"http://localhost:8080/api/session/google"},async(accessToken,refreshToken,profile,cb)=>{try{const{name:name,emails:emails}=profile,user={first_name:name.givenName,last_name:name.familyName,email:emails[0].value},existUser=await userDao.getByEmail(emails[0].value);if(existUser)return cb(null,existUser);const newUser=await userDao.create(user);cb(null,newUser)}catch(error){return cb(error)}})),passport.use("jwt",new JWTStrategy({jwtFromRequest:ExtractJWT.fromExtractors([cookieExtracto]),secretOrKey:envs.CODE_SECRET},async(jwt_payload,done)=>{try{return done(null,jwt_payload)}catch(error){return done(error)}})),passport.serializeUser((user,done)=>{done(null,user._id)}),passport.deserializeUser(async(id,done)=>{const user=await userDao.getByEmail(id);done(null,user)})};export default inicializePassport;